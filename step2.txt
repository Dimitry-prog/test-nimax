import { useForm } from 'react-hook-form';
import { z } from 'zod';

const schema = z.object({
  firstName: z.string().nonempty(),
  lastName: z.string().nonempty(),
  middleName: z.string().optional(),
  phone: z.string().regex(/^\+7\d{10}$/),
  birthDate: z.date().min(new Date(1900, 0, 1)),
});

type FormData = z.infer<typeof schema>;

const FormStep2 = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(schema),
  });

  const onSubmit = (data: FormData) => {
    console.log(data);
    // отправка данных на сервер и переход к третьему шагу
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-xl mx-auto">
      <div className="mb-4">
        <label htmlFor="firstName" className="block mb-1 font-medium text-gray-700">Имя</label>
        <input type="text" id="firstName" {...register('firstName')} className={`w-full px-3 py-2 border rounded-md ${errors.firstName ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.firstName && <span className="text-sm text-red-500">{errors.firstName.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="lastName" className="block mb-1 font-medium text-gray-700">Фамилия</label>
        <input type="text" id="lastName" {...register('lastName')} className={`w-full px-3 py-2 border rounded-md ${errors.lastName ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.lastName && <span className="text-sm text-red-500">{errors.lastName.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="middleName" className="block mb-1 font-medium text-gray-700">Отчество</label>
        <input type="text" id="middleName" {...register('middleName')} className={`w-full px-3 py-2 border rounded-md ${errors.middleName ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.middleName && <span className="text-sm text-red-500">{errors.middleName.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="phone" className="block mb-1 font-medium text-gray-700">Номер телефона</label>
        <input type="text" id="phone" {...register('phone')} className={`w-full px-3 py-2 border rounded-md ${errors.phone ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.phone && <span className="text-sm text-red-500">{errors.phone.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="birthDate" className="block mb-1 font-medium text-gray-700">Дата рождения</label>
        <input type="date" id="birthDate" {...register('birthDate')} className={`w-full px-3 py-2 border rounded-md ${errors.birthDate ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.birthDate && <span className="text-sm text-red-500">{errors.birthDate.message}</span>}
      </div>
      <button type="submit" disabled={!formState.isValid} className={`w-full py-2 text-white bg-blue-500 rounded-md ${!formState.isValid ? 'opacity-50 cursor-not-allowed' : ''}`}>Оплатить</button>
    </form>
  );
};
