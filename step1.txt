import { useForm } from 'react-hook-form';
import { z } from 'zod';

const schema = z.object({
  adults: z.number().min(1).int(),
  children5to12: z.number().int().optional(),
  childrenUnder5: z.number().int().optional(),
  roomType: z.enum(['Эконом', 'Стандарт', 'Люкс']),
  nights: z.number().min(1).int(),
  insurance: z.boolean().optional(),
});

type FormData = z.infer<typeof schema>;

const FormStep1 = () => {
  const { register, handleSubmit, formState: { errors } } = useForm<FormData>({
    resolver: zodResolver(schema),
  });

  const onSubmit = (data: FormData) => {
    console.log(data);
    // пересчет стоимости заказа и переход к следующему шагу
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)} className="max-w-xl mx-auto">
      <div className="mb-4">
        <label htmlFor="adults" className="block mb-1 font-medium text-gray-700">Количество взрослых</label>
        <input type="number" id="adults" {...register('adults')} className={`w-full px-3 py-2 border rounded-md ${errors.adults ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.adults && <span className="text-sm text-red-500">{errors.adults.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="children5to12" className="block mb-1 font-medium text-gray-700">Количество детей от 5 до 12 лет</label>
        <input type="number" id="children5to12" {...register('children5to12')} className={`w-full px-3 py-2 border rounded-md ${errors.children5to12 ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.children5to12 && <span className="text-sm text-red-500">{errors.children5to12.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="childrenUnder5" className="block mb-1 font-medium text-gray-700">Количество детей до 5 лет</label>
        <input type="number" id="childrenUnder5" {...register('childrenUnder5')} className={`w-full px-3 py-2 border rounded-md ${errors.childrenUnder5 ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.childrenUnder5 && <span className="text-sm text-red-500">{errors.childrenUnder5.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="roomType" className="block mb-1 font-medium text-gray-700">Тип номера</label>
        <select id="roomType" {...register('roomType')} className={`w-full px-3 py-2 border rounded-md ${errors.roomType ? 'border-red-500' : 'border-gray-300'}`}>
          <option value="Эконом">Эконом</option>
          <option value="Стандарт">Стандарт</option>
          <option value="Люкс">Люкс</option>
        </select>
        {errors.roomType && <span className="text-sm text-red-500">{errors.roomType.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="nights" className="block mb-1 font-medium text-gray-700">Количество ночей</label>
        <input type="number" id="nights" {...register('nights')} className={`w-full px-3 py-2 border rounded-md ${errors.nights ? 'border-red-500' : 'border-gray-300'}`} />
        {errors.nights && <span className="text-sm text-red-500">{errors.nights.message}</span>}
      </div>
      <div className="mb-4">
        <label htmlFor="insurance" className="inline-flex items-center cursor-pointer">
          <input type="checkbox" id="insurance" {...register('insurance')} className={`mr-2 border rounded ${errors.insurance ? 'border-red-500' : 'border-gray-300'}`} />
          <span className="text-sm font-medium text-gray-700">Страховка</span>
        </label>
        {errors.insurance && <span className="text-sm text-red-500">{errors.insurance.message}</span>}
      </div>
      <button type="submit" disabled={!formState.isValid} className={`w-full py-2 text-white bg-blue-500 rounded-md ${!formState.isValid ? 'opacity-50 cursor-not-allowed' : ''}`}>Далее</button>
    </form>
  );
};
