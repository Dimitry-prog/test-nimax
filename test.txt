import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { useRouter } from 'next/router';

type FormValues = {
  firstName: string;
  lastName: string;
  email: string;
  password: string;
};

const schema = z.object({
  firstName: z.string().nonempty(),
  lastName: z.string().nonempty(),
  email: z.string().email(),
  password: z.string().min(8),
});

const FormStep1 = ({ register, errors }) => (
  <div>
    <label htmlFor="firstName">First Name</label>
    <input type="text" id="firstName" name="firstName" ref={register({ required: true })} />
    {errors.firstName && <span>This field is required</span>}
    <label htmlFor="lastName">Last Name</label>
    <input type="text" id="lastName" name="lastName" ref={register({ required: true })} />
    {errors.lastName && <span>This field is required</span>}
  </div>
);

const FormStep2 = ({ register, errors }) => (
  <div>
    <label htmlFor="email">Email</label>
    <input type="email" id="email" name="email" ref={register({ required: true })} />
    {errors.email && <span>This field is required</span>}
  </div>
);

const FormStep3 = ({ register, errors }) => (
  <div>
    <label htmlFor="password">Password</label>
    <input type="password" id="password" name="password" ref={register({ required: true })} />
    {errors.password && <span>This field is required</span>}
  </div>
);

const MultiStepForm = () => {
  const { register, handleSubmit, errors, formState, getValues } = useForm<FormValues>({
    validationSchema: schema,
    mode: 'onBlur',
  });
  const router = useRouter();

  const onSubmit = (data: FormValues) => {
    console.log(data);
    router.push('/success');
  };

  const handleNext = () => {
    const values = getValues();
    if (formState.isValid) {
      // save values to state or API
      console.log(values);
    }
  };

  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      {router.query.step === '1' && <FormStep1 register={register} errors={errors} />}
      {router.query.step === '2' && <FormStep2 register={register} errors={errors} />}
      {router.query.step === '3' && <FormStep3 register={register} errors={errors} />}
      <button type="button" onClick={router.back}>
        Back
      </button>
      {router.query.step !== '3' && (
        <button type="button" onClick={handleNext}>
          Next
        </button>
      )}
      {router.query.step === '3' && (
        <button type="submit" disabled={!formState.isValid}>
          Submit
        </button>
      )}
    </form>
  );
};

export default MultiStepForm;
const handleNext = () => {
  const values = getValues();
  if (formState.isValid) {
    const nextStep = parseInt(router.query.step as string, 10) + 1;
    router.push(`/form?step=${nextStep}`);
  }
};